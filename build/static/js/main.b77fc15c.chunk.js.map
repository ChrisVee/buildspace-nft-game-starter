{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b77fc15c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0x5f7cCb5C15671DBd33C795150BC96024A106B456';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n    return {\n      name: characterData.name,\n      imageURI: characterData.imageURI,\n      hp: characterData.hp.toNumber(),\n      maxHp: characterData.maxHp.toNumber(),\n      attackDamage: characterData.attackDamage.toNumber(),\n    };\n  };\n  \n  export { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  /*\n * New minting state property we will be using\n */\nconst [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // UseEffect\nuseEffect(() => {\n  const { ethereum } = window;\n\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    /*\n     * This is the big difference. Set our gameContract in state.\n     */\n    setGameContract(gameContract);\n  } else {\n    console.log('Ethereum object not found');\n  }\n}, []);\n\nuseEffect(() => {\n  const getCharacters = async () => {\n    try {\n      console.log('Getting contract characters to mint');\n\n      const charactersTxn = await gameContract.getAllDefaultCharacters();\n      console.log('charactersTxn:', charactersTxn);\n\n      const characters = charactersTxn.map((characterData) =>\n        transformCharacterData(characterData)\n      );\n\n      setCharacters(characters);\n    } catch (error) {\n      console.error('Something went wrong fetching characters:', error);\n    }\n  };\n\n  /*\n   * Add a callback method that will fire when this event is received\n   */\n  const onCharacterMint = async (sender, tokenId, characterIndex) => {\n    console.log(\n      `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n    );\n\n    /*\n     * Once our character NFT is minted we can fetch the metadata from our contract\n     * and set it in state to move onto the Arena\n     */\n    if (gameContract) {\n      const characterNFT = await gameContract.checkIfUserHasNFT();\n      console.log('CharacterNFT: ', characterNFT);\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n  };\n\n  if (gameContract) {\n    getCharacters();\n\n    /*\n     * Setup NFT Minted Listener\n     */\n    gameContract.on('CharacterNFTMinted', onCharacterMint);\n  }\n\n  return () => {\n    /*\n     * When your component unmounts, let;s make sure to clean up this listener\n     */\n    if (gameContract) {\n      gameContract.off('CharacterNFTMinted', onCharacterMint);\n    }\n  };\n  /* eslint-disable */\n}, [gameContract]);\n  \n// Actions\nconst mintCharacterNFTAction = (characterId) => async () => {\n  try {\n    if (gameContract) {\n      /*\n       * Show our loading indicator\n       */\n      setMintingCharacter(true);\n      console.log('Minting character in progress...');\n      const mintTxn = await gameContract.mintCharacterNFT(characterId);\n      await mintTxn.wait();\n      console.log(mintTxn);\n      /*\n       * Hide our loading indicator when minting is finished\n       */\n      setMintingCharacter(false);\n    }\n  } catch (error) {\n    console.warn('MintCharacterAction Error:', error);\n    /*\n     * If there is a problem, hide the loading indicator as well\n     */\n    setMintingCharacter(false);\n  }\n};\n/// Render Methods\nconst renderCharacters = () =>\ncharacters.map((character, index) => (\n  <div className=\"character-item\" key={character.name}>\n    <div className=\"name-container\">\n      <p>{character.name}</p>\n    </div>\n    <img src={character.imageURI} alt={character.name} />\n    <button\n      type=\"button\"\n      className=\"character-mint-button\"\n      onClick={()=> mintCharacterNFTAction(index)}\n    >{`Mint ${character.name}`}</button>\n  </div>\n));\n\nreturn (\n  <div className=\"select-character-container\">\n    <h2>Mint Your Hero. Choose wisely.</h2>\n    {characters.length > 0 && (\n      <div className=\"character-grid\">{renderCharacters()}</div>\n    )}\n    {/* Only show our loading state if mintingCharacter is true */}\n    {mintingCharacter && (\n      <div className=\"loading\">\n        <div className=\"indicator\">\n          <LoadingIndicator />\n          <p>Minting In Progress...</p>\n        </div>\n        <img\n          src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n          alt=\"Minting loading indicator\"\n        />\n      </div>\n    )}\n  </div>\n);\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n    /*\n    * State that will hold our boss metadata\n    */\n    const [boss, setBoss] = useState(null);\n\n/*\n* We are going to use this to add a bit of fancy animations during attacks\n*/\nconst [attackState, setAttackState] = useState('');\n\n/*\n* Toast state management\n*/\nconst [showToast, setShowToast] = useState(false);  \n\nconst runAttackAction = async () => {\n  try {\n    if (gameContract) {\n      setAttackState('attacking');\n      console.log('Attacking boss...');\n      const attackTxn = await gameContract.attackBoss();\n      await attackTxn.wait();\n      console.log('attackTxn:', attackTxn);\n      setAttackState('hit');\n      \n      /*\n      * Set your toast state to true and then false 5 seconds later\n      */\n        setShowToast(true);\n        setTimeout(() => {\n            setShowToast(false);\n        }, 5000);\n    }\n  } catch (error) {\n    console.error('Error attacking boss:', error);\n    setAttackState('');\n  }\n};\n\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n    // UseEffects\n    useEffect(() => {\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss();\n            console.log('Boss:', bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n\n        /*\n        * Setup logic when this event is fired off\n        */\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            const bossHp = newBossHp.toNumber();\n            const playerHp = newPlayerHp.toNumber();\n\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n            /*\n            * Update both player and boss Hp\n            */\n            setBoss((prevState) => {\n                return { ...prevState, hp: bossHp };\n            });\n\n            setCharacterNFT((prevState) => {\n                return { ...prevState, hp: playerHp };\n            });\n        };\n\n        if (gameContract) {\n            fetchBoss();\n            gameContract.on('AttackComplete', onAttackComplete);\n        }\n\n        /*\n        * Make sure to clean up this event when this component is removed\n        */\n        return () => {\n            if (gameContract) {\n                gameContract.off('AttackComplete', onAttackComplete);\n            }\n        }\n        /* eslint-disable */\n    }, [gameContract]);\n\nreturn (\n    <div className=\"arena-container\">\n            {/* Add your toast HTML right here */}\n    {boss && characterNFT && (\n      <div id=\"toast\" className={showToast ? 'show' : ''}>\n        <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n      </div>\n    )}\n        {boss && (\n        <div className=\"boss-container\">\n        <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n            <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n            </div>\n            </div>\n        </div>\n        <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n            {`💥 Attack ${boss.name}`}\n            </button>\n        </div>\n        {/* Add this right under your attack button */}\n        {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n            <LoadingIndicator />\n            <p>Attacking ⚔️</p>\n            </div>\n        )}\n        </div>\n    )}\n  \n      {/* Replace your Character UI with this */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  /*\n * Right under current account, setup this new state property\n */\nconst [characterNFT, setCharacterNFT] = useState(null);\n/*\n* New state property added here\n*/\nconst [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        /*\n         * We set isLoading here because we use return in the next line\n         */\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    /*\n     * We release the state property after all the function logic\n     */\n    setIsLoading(false);\n};\n\n  const renderContent = () => {\n    /*\n     * If the app is currently loading, just render out LoadingIndicator\n     */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n  \n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n<img\n          src=\"https://i.pinimg.com/originals/f3/99/73/f39973cbdfb5891091d51764cb8666d2.gif\"\n          alt=\"Escape the Rat Race\"\n        />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  // UseEffects\nuseEffect(() => {\n  /*\n   * Anytime our component mounts, make sure to immiediately set our loading state\n   */\n  setIsLoading(true);\n  checkIfWalletIsConnected();\n}, []);\n\nuseEffect(() => {\n  const fetchNFTMetadata = async () => {\n    console.log('Checking for Character NFT on address:', currentAccount);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    const characterNFT = await gameContract.checkIfUserHasNFT();\n    if (characterNFT.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n\n    /*\n     * Once we are done with all the fetching, set loading state to false\n     */\n    setIsLoading(false);\n  };\n\n  if (currentAccount) {\n    console.log('CurrentAccount:', currentAccount);\n    fetchNFTMetadata();\n  }\n}, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">💼 Escape the Rat Race 💼</p>\n          <p className=\"sub-text\">Team up to escape the office and take an epic vacation!</p>\n            {/* This is where our button and image code used to be!\n         *\tRemember we moved it into the render method.\n         */}\n        {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}